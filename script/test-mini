#!/usr/bin/env bash

# Build mini image for local development

set -euo pipefail

MONOBASE_PYTHON='3.13'

cd "$(git rev-parse --show-toplevel)"

# Build test requirements
uv run --python "$MONOBASE_PYTHON" python -m monobase.update --environment test

# Build test PREFIX
mkdir -p build/monobase build/cache build/root
docker run --rm \
    --env R8_COG_VERSION=coglet \
    --env R8_CUDA_VERSION=12.4 \
    --env R8_CUDNN_VERSION=9 \
    --env R8_PYTHON_VERSION=3.12 \
    --env R8_TORCH_VERSION=2.4.1 \
    --env CI_SKIP_CUDA=1 \
    --volume "$PWD/requirements-user.txt:/tmp/requirements-user.txt:ro" \
    --volume "$PWD/src/monobase:/opt/r8/monobase:ro" \
    --volume "$PWD/build/monobase:/srv/r8/monobase" \
    --volume "$PWD/build/cache:/var/cache/monobase" \
    monobase:latest \
    /opt/r8/monobase/run.sh \
    monobase.build \
    --environment test \
    --mini \
    "$@"

docker run --rm \
    --env R8_COG_VERSION=coglet \
    --env R8_CUDA_VERSION=12.4 \
    --env R8_CUDNN_VERSION=9 \
    --env R8_PYTHON_VERSION=3.12 \
    --env R8_TORCH_VERSION=2.4.1 \
    --env CI_SKIP_CUDA=1 \
    --volume "$PWD/requirements-user.txt:/tmp/requirements-user.txt:ro" \
    --volume "$PWD/src/monobase:/opt/r8/monobase:ro" \
    --volume "$PWD/build/monobase:/srv/r8/monobase" \
    --volume "$PWD/build/root:/root" \
    monobase:latest \
    /opt/r8/monobase/run.sh \
    monobase.user \
    --requirements /tmp/requirements-user.txt \
    "$@"

fail=0
test() {
    op="$1"
    f="$PWD/build/$2"
    r=0
    case "$op" in
        -d) [ -d "$f" ] || r=1 ;;
        -f) [ -f "$f" ] || r=1 ;;
        -h) [ -h "$f" ] || r=1 ;;
        -s) [ -s "$f" ] || r=1 ;;
        -x) [ -x "$f" ] || r=1 ;;
    esac

    if [ "$r" -eq 0 ]; then
        echo "PASS: [ $op $2 ]"
    else
        echo "FAIL: [ $op $2 ]"
        fail=$((fail + 1))
    fi
}

is-json() {
    f="$PWD/build/$1"
    if jq < "$f" >/dev/null; then
        echo "PASS: is-json $1"
    else
        echo "FAIL: is-json $1"
        fail=$((fail + 1))
    fi
}

# Test /srv/r8/monobase structure
test -x 'monobase/bin/uv'
test -x 'monobase/bin/pget'
test -h 'monobase/cog/latest'
test -s 'monobase/cog/latest/.done'
is-json 'monobase/cog/latest/.done'
test -h 'monobase/cog/latest/default-python3.12'
test -h 'monobase/monobase/latest'
test -d 'monobase/monobase/g00001'
test -s 'monobase/monobase/g00001/.done'
is-json 'monobase/monobase/g00001/.done'
test -h 'monobase/monobase/g00001/cuda12.4'
test -s 'monobase/monobase/g00001/cuda12.4/.done'
is-json 'monobase/monobase/g00001/cuda12.4/.done'
test -h 'monobase/monobase/g00001/cudnn9-cuda12'
test -s 'monobase/monobase/g00001/cudnn9-cuda12/.done'
is-json 'monobase/monobase/g00001/cudnn9-cuda12/.done'
test -d 'monobase/monobase/g00001/ld.so.cache.d'
test -d 'monobase/monobase/g00001/python3.12-torch2.4.1-cu124'
test -s 'monobase/monobase/g00001/python3.12-torch2.4.1-cu124/.done'
is-json 'monobase/monobase/g00001/python3.12-torch2.4.1-cu124/.done'
test -d 'root/.venv'
test -s 'root/.venv/.done'
is-json 'root/.venv/.done'
test -f 'root/requirements-cog.txt'
test -f 'root/requirements-mono.txt'
test -f 'root/requirements-user.txt'

if [ "$fail" -gt 0 ]; then
    exit 1
fi

read -r -d '' SCRIPT << EOF || :
import sys, coglet, torch
assert sys.version.startswith('3.12.8'), f'sys.version is not 3.12.8: {sys.version}'
assert coglet.__file__.startswith('/srv/r8/monobase/cog'), f'coglet is not pre-installed: {coglet.__file__}'
assert coglet.__version__ == '0.1.0a2', f'coglet.__version__ is not 0.1.0a2: {coglet.__version__}'
assert torch.__version__ == '2.4.1+cu124', f'torch.__version__ is not 2.4.1+cu124: {torch.__version__}'
print('PASS: venv versions')
EOF

docker run --rm \
    --volume "$PWD/src/monobase:/opt/r8/monobase:ro" \
    --volume "$PWD/build/monobase:/srv/r8/monobase:ro" \
    --volume "$PWD/build/root:/root" \
    --env R8_COG_VERSION=coglet \
    --env R8_CUDA_VERSION=12.4 \
    --env R8_CUDNN_VERSION=9 \
    --env R8_PYTHON_VERSION=3.12 \
    --env R8_TORCH_VERSION=2.4.1 \
    monobase:latest \
    '/opt/r8/monobase/exec.sh' \
    python -c "$SCRIPT"

read -r -d '' SCRIPT << EOF || :
import boto3, datasets, mypy, yaml, requests
print('PASS: user venv')
EOF

docker run --rm \
    --volume "$PWD/src/monobase:/opt/r8/monobase:ro" \
    --volume "$PWD/build/monobase:/srv/r8/monobase:ro" \
    --volume "$PWD/build/root:/root" \
    --env R8_CUDA_VERSION=12.4 \
    --env R8_CUDNN_VERSION=9 \
    --env R8_PYTHON_VERSION=3.12 \
    --env R8_TORCH_VERSION=2.4.1 \
    monobase:latest \
    '/opt/r8/monobase/exec.sh' \
    python -c "$SCRIPT"
