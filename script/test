#!/usr/bin/env bash

# Test End-To-End

set -euo pipefail

MONOBASE_PYTHON='3.13'

cd "$(git rev-parse --show-toplevel)"

# Build test requirements
uv run --python "$MONOBASE_PYTHON" python -m monobase.update --environment test

# Build test PREFIX
mkdir -p build/monobase build/cache build/nfd-features.d
docker run --rm \
    --user "$(id -u):$(id -g)" \
    --volume "$PWD/src/monobase:/opt/r8/monobase" \
    --volume "$PWD/build/monobase:/srv/r8/monobase" \
    --volume "$PWD/build/cache:/var/cache/monobase" \
    --volume "$PWD/build/nfd-features.d:/etc/kubernetes/node-feature-discovery/features.d" \
    --env CI_SKIP_CUDA=1 \
    monobase:latest \
    /opt/r8/monobase/run.sh \
    monobase.build \
    --environment test \
    --cog-versions \
    0.11.3 \
    coglet==0.1.0-alpha1 \
    https://github.com/replicate/cog/archive/00b98bc90bb784102243b7aec41ad1cbffaefece.zip \
    --default-cog-version 0.11.3 \
    --write-node-feature-discovery-labels \
    "$@"

fail=0
test() {
    op="$1"
    f="$PWD/build/$2"
    r=0
    case "$op" in
        -d) [ -d "$f" ] || r=1 ;;
        -f) [ -f "$f" ] || r=1 ;;
        -h) [ -h "$f" ] || r=1 ;;
        -s) [ -s "$f" ] || r=1 ;;
        -x) [ -x "$f" ] || r=1 ;;
    esac

    if [ "$r" -eq 0 ]; then
        echo "PASS: [ $op $2 ]"
    else
        echo "FAIL: [ $op $2 ]"
        fail=$((fail + 1))
    fi
}

is-json() {
    f="$PWD/build/$1"
    if jq < "$f" >/dev/null; then
        echo "PASS: is-json $1"
    else
        echo "FAIL: is-json $1"
        fail=$((fail + 1))
    fi
}

# Test ./build structure which maps to /srv/r8/monobase in container
test -s 'monobase/.done'
is-json 'monobase/.done'
test -x 'monobase/bin/uv'
test -x 'monobase/bin/pget'
test -h 'monobase/cog/latest'
test -s 'monobase/cog/latest/.done'
is-json 'monobase/cog/latest/.done'
test -h 'monobase/cog/latest/default-python3.12'
test -h 'monobase/monobase/latest'
test -d 'monobase/monobase/g00000'
test -s 'monobase/monobase/g00000/.done'
is-json 'monobase/monobase/g00000/.done'
test -h 'monobase/monobase/g00000/cuda12.4'
test -s 'monobase/monobase/g00000/cuda12.4/.done'
is-json 'monobase/monobase/g00000/cuda12.4/.done'
test -h 'monobase/monobase/g00000/cudnn9-cuda12'
test -s 'monobase/monobase/g00000/cudnn9-cuda12/.done'
is-json 'monobase/monobase/g00000/cudnn9-cuda12/.done'
test -d 'monobase/monobase/g00000/ld.so.cache.d'
test -d 'monobase/monobase/g00000/python3.12-torch2.4.1-cpu'
test -s 'monobase/monobase/g00000/python3.12-torch2.4.1-cpu/.done'
is-json 'monobase/monobase/g00000/python3.12-torch2.4.1-cpu/.done'
test -d 'monobase/monobase/g00000/python3.12-torch2.4.1-cu124'
test -s 'monobase/monobase/g00000/python3.12-torch2.4.1-cu124/.done'
is-json 'monobase/monobase/g00000/python3.12-torch2.4.1-cu124/.done'
test -s 'nfd-features.d/monobase'

if [ "$fail" -gt 0 ]; then
    exit 1
fi

####################
# Test Monobase
####################

read -r -d '' SCRIPT << EOF || :
import sys, cog, torch
assert sys.version.startswith('3.12.8'), f'sys.version is not 3.12.8: {sys.version}'
assert cog.__file__.startswith('/srv/r8/monobase/cog'), f'cog is not pre-installed: {cog.__file__}'
assert cog.__version__ == '0.11.3', f'cog.__version__ is not 0.11.3: {cog.__version__}'
assert torch.__version__ == '2.4.1+cu124', f'torch.__version__ is not 2.4.1+cu124: {torch.__version__}'
print('PASS: venv versions')
EOF

docker run --rm \
    --volume "$PWD/src/monobase:/opt/r8/monobase" \
    --volume "$PWD/build/monobase:/srv/r8/monobase" \
    --env R8_CUDA_VERSION=12.4 \
    --env R8_CUDNN_VERSION=9 \
    --env R8_PYTHON_VERSION=3.12 \
    --env R8_TORCH_VERSION=2.4.1 \
    monobase:latest \
    '/opt/r8/monobase/exec.sh' \
    python -c "$SCRIPT"

# Missing CUDA & CuDNN versions
read -r -d '' SCRIPT << EOF || :
import sys, cog, torch
assert sys.version.startswith('3.12.8'), f'sys.version is not 3.12.8: {sys.version}'
assert cog.__file__.startswith('/srv/r8/monobase/cog'), f'cog is not pre-installed: {cog.__file__}'
assert cog.__version__ == '0.11.3', f'cog.__version__ is not 0.11.3: {cog.__version__}'
assert torch.__version__ == '2.4.1+cpu', f'torch.__version__ is not 2.4.1+cpu: {torch.__version__}'
print('PASS: venv versions')
EOF

docker run --rm \
    --volume "$PWD/src/monobase:/opt/r8/monobase" \
    --volume "$PWD/build/monobase:/srv/r8/monobase" \
    --env R8_PYTHON_VERSION=3.12 \
    --env R8_TORCH_VERSION=2.4.1 \
    monobase:latest \
    '/opt/r8/monobase/exec.sh' \
    python -c "$SCRIPT"

# Missing Torch version
read -r -d '' SCRIPT << EOF || :
import sys, cog
assert sys.version.startswith('3.12.8'), f'sys.version is not 3.12.8: {sys.version}'
assert cog.__file__.startswith('/srv/r8/monobase/cog'), f'cog is not pre-installed: {cog.__file__}'
assert cog.__version__ == '0.11.3', f'cog.__version__ is not 0.11.3: {cog.__version__}'
try:
    import torch
except ModuleNotFoundError:
    pass
print('PASS: venv versions')
EOF

docker run --rm \
    --volume "$PWD/src/monobase:/opt/r8/monobase" \
    --volume "$PWD/build/monobase:/srv/r8/monobase" \
    --env R8_CUDA_VERSION=12.4 \
    --env R8_CUDNN_VERSION=9 \
    --env R8_PYTHON_VERSION=3.12 \
    monobase:latest \
    '/opt/r8/monobase/exec.sh' \
    python -c "$SCRIPT"

####################
# Test Cog
####################

read -r -d '' SCRIPT << EOF || :
import cog
assert cog.__file__.startswith('/srv/r8/monobase/cog'), f'cog is not pre-installed: {cog.__file__}'
assert cog.__version__ == '0.11.3', f'cog.__version__ is not 0.11.3: {cog.__version__}'
print('PASS: Pre-installed cog==0.11.3')
EOF
docker run --rm \
    --volume "$PWD/src/monobase:/opt/r8/monobase" \
    --volume "$PWD/build/monobase:/srv/r8/monobase" \
    --env R8_COG_VERSION=0.11.3 \
    --env R8_CUDA_VERSION=12.4 \
    --env R8_CUDNN_VERSION=9 \
    --env R8_PYTHON_VERSION=3.12 \
    --env R8_TORCH_VERSION=2.4.1 \
    monobase:latest \
    '/opt/r8/monobase/exec.sh' \
    python -c "$SCRIPT"

read -r -d '' SCRIPT << EOF || :
import cog
assert cog.__file__.startswith('/srv/r8/monobase/cog'), f'cog is not pre-installed: {cog.__file__}'
assert cog.__version__ == '0.11.2.dev71+g00b98bc90b', f'cog.__version__ is not 0.11.2.dev71+g00b98bc90b: {cog.__version__}'
print('PASS: Pre-installed cog @ https://...')
EOF
docker run --rm \
    --volume "$PWD/src/monobase:/opt/r8/monobase" \
    --volume "$PWD/build/monobase:/srv/r8/monobase" \
    --env R8_COG_VERSION=https://github.com/replicate/cog/archive/00b98bc90bb784102243b7aec41ad1cbffaefece.zip \
    --env R8_CUDA_VERSION=12.4 \
    --env R8_CUDNN_VERSION=9 \
    --env R8_PYTHON_VERSION=3.12 \
    --env R8_TORCH_VERSION=2.4.1 \
    monobase:latest \
    '/opt/r8/monobase/exec.sh' \
    python -c "$SCRIPT"

read -r -d '' SCRIPT << EOF || :
import cog
assert cog.__file__.startswith('/root/cog'), f'cog is not installed on the fly: {cog.__file__}'
assert cog.__version__ == '0.9.0', f'cog.__version__ is not 0.9.0: {cog.__version__}'
print('PASS: On-demand cog==0.9.0')
EOF
docker run --rm \
    --volume "$PWD/src/monobase:/opt/r8/monobase" \
    --volume "$PWD/build/monobase:/srv/r8/monobase" \
    --env R8_COG_VERSION=0.9.0 \
    --env R8_CUDA_VERSION=12.4 \
    --env R8_CUDNN_VERSION=9 \
    --env R8_PYTHON_VERSION=3.12 \
    --env R8_TORCH_VERSION=2.4.1 \
    monobase:latest \
    '/opt/r8/monobase/exec.sh' \
    python -c "$SCRIPT"

read -r -d '' SCRIPT << EOF || :
import cog
assert cog.__file__.startswith('/root/cog'), f'cog is not installed on the fly: {cog.__file__}'
assert cog.__version__ == '0.11.4.dev77+g8ea4663247', f'cog.__version__ is not 0.11.4.dev77+g8ea4663247: {cog.__version__}'
print('PASS: On-demand cog @ https://...')
EOF
docker run --rm \
    --volume "$PWD/src/monobase:/opt/r8/monobase" \
    --volume "$PWD/build/monobase:/srv/r8/monobase" \
    --env R8_COG_VERSION=https://github.com/replicate/cog/archive/8ea466324738f3143954ec5be3211051659a20da.zip \
    --env R8_CUDA_VERSION=12.4 \
    --env R8_CUDNN_VERSION=9 \
    --env R8_PYTHON_VERSION=3.12 \
    --env R8_TORCH_VERSION=2.4.1 \
    monobase:latest \
    '/opt/r8/monobase/exec.sh' \
    python -c "$SCRIPT"

read -r -d '' SCRIPT << EOF || :
import coglet
assert coglet.__file__.startswith('/srv/r8/monobase/cog'), f'coglet is not pre-installed: {coglet.__file__}'
assert coglet.__version__ == '0.1.0a1', f'coglet.__version__ is not 0.1.0a1: {coglet.__version__}'
print('PASS: Pre-installed coglet==0.1.0-alpha1')
EOF
docker run --rm \
    --volume "$PWD/src/monobase:/opt/r8/monobase" \
    --volume "$PWD/build/monobase:/srv/r8/monobase" \
    --env R8_COG_VERSION=coglet==0.1.0-alpha1 \
    --env R8_CUDA_VERSION=12.4 \
    --env R8_CUDNN_VERSION=9 \
    --env R8_PYTHON_VERSION=3.12 \
    --env R8_TORCH_VERSION=2.4.1 \
    monobase:latest \
    '/opt/r8/monobase/exec.sh' \
    python -c "$SCRIPT"

read -r -d '' SCRIPT << EOF || :
import coglet
assert coglet.__file__.startswith('/root/cog'), f'coglet is not installed on the fly: {coglet.__file__}'
assert coglet.__version__ == '0.1.0a1', f'coglet.__version__ is not 0.1.0a1: {coglet.__version__}'
print('PASS: On-demand coglet==0.1.0-alpha1')
EOF
docker run --rm \
    --volume "$PWD/src/monobase:/opt/r8/monobase" \
    --volume "$PWD/build/monobase:/srv/r8/monobase" \
    --env R8_COG_VERSION=https://github.com/replicate/cog-runtime/releases/download/v0.1.0-alpha1/coglet-0.1.0a1-py3-none-any.whl \
    --env R8_CUDA_VERSION=12.4 \
    --env R8_CUDNN_VERSION=9 \
    --env R8_PYTHON_VERSION=3.12 \
    --env R8_TORCH_VERSION=2.4.1 \
    monobase:latest \
    '/opt/r8/monobase/exec.sh' \
    python -c "$SCRIPT"

####################
# Test Misc
####################

# NCCL
read -r -d '' SCRIPT << EOF || :
import ctypes
ctypes.CDLL('libnccl.so.2')
print('PASS: NCCL')
EOF
docker run --rm \
    --volume "$PWD/src/monobase:/opt/r8/monobase" \
    --volume "$PWD/build/monobase:/srv/r8/monobase" \
    --env R8_CUDA_VERSION=12.4 \
    --env R8_CUDNN_VERSION=9 \
    --env R8_PYTHON_VERSION=3.12 \
    --env R8_TORCH_VERSION=2.4.1 \
    monobase:latest \
    '/opt/r8/monobase/exec.sh' \
    python -c "$SCRIPT"

echo 'DONE: all tests passed'
