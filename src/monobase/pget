#!/bin/bash

# Hijack PGET and serve file lazily with FUSE RPC

set -euo pipefail

PGET_BIN="${PGET_BIN:-${MONOBASE_PREFIX:-/srv/r8/monobase}/bin/pget-bin}"
FUSE_MOUNT="${FUSE_MOUNT:-/srv/r8/fuse-rpc}"

PROC_FILE="$FUSE_MOUNT/proc/pget"

fuse_pget() {
    url="$1"
    dst="$2"

    # Finger print object name with URL, size, ETag, and last modified
    echo "$(date --iso-8601=seconds --utc) pget $*"
    out="$(curl -fsSL -I "$url" | grep -i '^\(content-length:\|etag:\|last-modified:\)')"
    fingerprint="$({
        echo "URL: $url"
        echo "$out" | grep -i '^content-length:' | tail -n 1
        echo "$out" | grep -i '^etag:' | tail -n 1
        echo "$out" | grep -i '^last-modified:' | tail -n 1
    })"

    sha256="$(echo "$fingerprint" | sha256sum | cut -d ' ' -f 1)"
    name="pget/sha256/$sha256"
    size="$(echo "$fingerprint" | grep -ioP '(?<=^content-length: )[0-9]+')"

    # Request file from FUSE
    echo "{\"name\":\"$name\",\"size\":$size,\"url\":\"$url\"}" > "$PROC_FILE"

    # Symlink file to destination
    mkdir -p "$(dirname "$dst")"
    ln -sf "$FUSE_MOUNT/$name" "$dst"
}

if [ ! -f "$PROC_FILE" ]; then
    # No FUSE proc file, fallback
    exec "$PGET_BIN" "$@"
elif [[ $# -ne 2 ]]; then
    # Fallback
    exec "$PGET_BIN" "$@"
elif [[ "$1" == http://* ]] || [[ "$1" == https://* ]]; then
    # pget <url> <dst>
    fuse_pget "$@"
elif [[ "$1" == multifile ]]; then
    in="$2"
    if [[ "$2" == - ]]; then
        in=/dev/stdin
    fi
    while read -r line; do
        [[ -n "$line" ]] || continue
        url="${line// */}"
        dst="${line//* /}"
        if [[ "$line" != "$url $dst" ]]; then
            echo "Error: error parsing manifest: invalid line format \`$line\`"
            exit 1
        fi
        fuse_pget "$url" "$dst"
    done < "$in"
else
    # Fallback
    exec "$PGET_BIN" "$@"
fi
